#!/usr/bin/env bash
# source code generated using shource: https://github.com/oliverisaac/shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

function main()
{
    local destination="$1"
    shift
    local search_folders=( "${@}" )
    
    for f in "${search_folders[@]}"; do
        search_folder "$destination" "$f"
    done
}

function get_md5_sums_from_folder()
{
    local folder="$1"

    find "$folder" -type f -print0 | while IFS= read -r -d '' file; do
        hash_file "$file"
    done
}

function search_folder()
{(
    local destination="$1"
    local folder="$2"
    # We hash it now and then add hashes as we go. Need to hash all files for every folder we search
    local md5_sums=$( get_md5_sums_from_folder "$destination" )

    folder=$( readlink -f "$folder" )
    while IFS= read -r -d '' file; do
        full_path=$( readlink -f "$file" )
        if check_and_move_file "$destination" "$file"; then
            file_sum=$( hash_file "$file" )
            md5_sums=$( printf "%s\n" "$md5_sums" "$file_sum" )  
        fi
    done < <( find "$folder" -type f -print0 )
)}

function hash_file()
{(
    for f in "${@}"; do
        md5sum "${@}" 
    done | awk '{print $1}'
)}
function check_and_move_file()
{(
    local destination="$1"
    local file="$2"

    if file_is_mp3 "$file"; then
        # New name is the original file name with any form of .MP3 changed to .mp3 (all lower case).
        # If it doens't end in .mp3 then .mp3 is appende.
        local new_name="$( basename "$file" | sed -r -e 's/([.][mM][pP][3])?$/.mp3/' )"
        local md5_sum=$( hash_file "$file" ) 
        if ! grep -qwe "$md5_sum" <<< "$md5_sums"; then
            log 0 "Copying $file"
            cp "$file" "$destination/$new_name"
            return 0
        fi
    fi

    log 0 "Skipping $file"
    return 1
)}

function file_is_mp3()
{(
    local file="$1"
    local ret=1

    local mime_type=$( file --mime-type "$file" )
    mime_type="${mime_type##*: }"

    if [[ $mime_type == "audio/mpeg" ]]; then
        ret=2
        if file "$file" | grep -q "layer III"; then
            ret=0
        fi
    fi

    return $ret
)}

function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}


# Loops through passed in args and sets variables for each of them
# Call like this: _parse_args help refresh debug -- "${@}"



function json_escape()
{(
    set +x
    local str="$1"
    str="${str//\\/\\\\}" # \
    str="${str//\//\\\/}" # /
    str="${str//\"/\\\"}" # "
    str="${str//$'\t'/\\t}" # \t (tab)
    str="${str//$'\n'/\\\n}" # \n (newline)
    str="${str//^M/\\\r}" # \r (carriage return)
    str="${str//^L/\\\f}" # \f (form feed)
    str="${str//^H/\\\b}" # \b (backspace)
    printf "%s" "$str"
)}

function json_print()
{(
    set +x


    local args=( "${@}" )
    local num_args=${#args[@]}
    local i

    printf "%s" "{"
    for (( i=0; i<$num_args; i=i+2 )); do
        local format="%s"
        local key="${args[$i]}"
        local value="${args[$i+1]}"

        local type="${key##*:}"
        if [[ $type != "" ]]; then
            format="%$type"
        fi

        # IF it's a string type, then wrap in quotes
        if [[ $format =~ s$ ]]; then
            format="\"$format\""
            value=$( json_escape "$value" )
        fi

        local comma=","
        if [[ $i -eq 0 ]]; then
            comma=""
        fi

        printf -- "$comma \"%s\": $format" "${key%%:*}" "$value"
    done

    printf "%s\n" "}"
)}


function _short_stack()
{(
    set +x
    local STACK=""
    local i 
    local stack_size="${#FUNCNAME[@]}"
    local response=""
    local line_no

    # to avoid noise we start with 1 to skip the get_stack function
    for (( i=2; i<=( stack_size - 1 ); i++ )); do
        local func="${FUNCNAME[$i]}"
        [[ "$func" == "" ]] && func=MAIN
        local linen="${BASH_LINENO[$(( i - 1 ))]}"
        local src="${BASH_SOURCE[$i]}"
        [[ "$src" == "" ]] && src=non_file_source

        response="$func:${linen}${response:+.}${response:-}"

    done
    local bash_source="${BASH_SOURCE[0]}"
    bash_source="${BASH_SOURCE##*/}"
    echo "$bash_source.$response"
)}
function log()
{(
    set +x


    local level="$1"
    shift
    local args=( "${@}" )
    if [[ $level -le ${LOG_LEVEL:-0} ]]; then
        local time=$( date "+%Y-%m-%d %H:%M:%S.%3N" )
        local message="${@}"

        if [[ ${JSON_LOG_FORMAT:-false} == "false" ]]; then
            echo "$time [log $level]: $message" >&2
        else
            time=$( date -u +"%Y-%m-%dT%H:%M:%S.%3NZ" )
            # We subtract one line number because shource adds a line at the beginning
            json_print time:s "$time" level:d "$level" msg:s "$message" source:s "$( _short_stack )" >&2
        fi
    fi
)}



function parse_these()
{
    local boolean_flags=()
    local array_flags=()
    local input_args=( "${@}" )
    local num_args=${#input_args[@]}
    local this_arg i key value arg_type

    log 2 "Called parse_args with these arguments: ${input_args[@]}"

    for (( i=0; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        if [[ $this_arg == "--" ]]; then
            i=$(( i + 1 ))
            break
        fi
        local arg_type=$BOOL_TYPE

        if [[ $this_arg == *:b* ]]; then
            arg_type=$BOOL_TYPE
        elif [[ $this_arg == *:a* ]]; then
            arg_type=$ARRAY_TYPE
        fi

        local flag="$( echo "${this_arg}" | tr '_-' '.' | sed 's/^-*//' | cut -d: -f1 )"

        log 4 "$i : $this_arg : $arg_type"

        case "$arg_type" in
            $BOOL_TYPE)
                boolean_flags+=( "$flag" )
            ;;
            $ARRAY_TYPE)
                array_flags+=( "$flag" )
            ;;
        esac
    done

    local boolean_regex=$( IFS='|'; echo "${boolean_flags[*]}" )
    boolean_regex="^--(no-)?(${boolean_regex})(=(true|false))?$"

    local array_regex=$( IFS='|'; echo "${array_flags[*]}" )
    array_regex="^--(${array_regex})(=(.*))?$"

    local populate_args=false
    declare -g -a _args=()
    for (( ; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        log 4 "$i : $this_arg"

        if [[ $this_arg == "--" ]]; then
            populate_args=true
            continue
        fi

        key=""
        value=true
        kind=$STRING_TYPE

        # Boolean flags
        if $populate_args; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        elif [[ ${#boolean_flags[@]} -gt 0 ]] && [[ $this_arg =~ $boolean_regex ]]; then
            key="${BASH_REMATCH[2]}"

            if [[ ${BASH_REMATCH[4]} == "false" ]]; then
                if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                    value=true
                else
                    value=false
                fi
            else
                if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                    value=false
                else
                    value=true
                fi
            fi
            kind=$BOOL_TYPE
        elif [[ ${#array_flags[@]} -gt 0 ]] && [[ $this_arg =~ $array_regex ]]; then
            key="${BASH_REMATCH[1]}"
            if [[ ${BASH_REMATCH[2]} == "" ]]; then
                ((i++))
                value="${input_args[$i]}"
            else
                value="${BASH_REMATCH[3]}"
            fi

            kind=$ARRAY_TYPE
        elif [[ $this_arg =~ ^--([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            kind=$STRING_TYPE
        elif [[ $this_arg =~ ^--(.+)$ ]]; then
            key="${BASH_REMATCH[1]}"
            ((i++))
            value="${input_args[$i]}"
            kind=$STRING_TYPE
        fi

        key="${key//-/_}"
        if [[ $key == "" ]]; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        fi
        printf "%s:%s:%s\n" "$kind" "$key" "$( printf "%s" "$value" | base64 -w0 )"
    done
}

function parse_args()
{
    local reset_x=false
    local ARRAY_TYPE=array BOOL_TYPE=boolean STRING_TYPE=string

    if [[ $- =~ x ]]; then
        reset_x=true
    fi
    set +x


    local key b64value
    _args=()
    while IFS=':' read kind key b64value; do
        local value=$( echo "$b64value" | base64 --decode )
        local indirect this_arr

        if [[ $kind == "$ARRAY_TYPE" ]]; then
            declare -n this_arr="$key"

            # IF this_arr is unset
            if [[ -z ${this_arr+x} ]]; then
                this_arr=()
            fi
            if [[ ${#this_arr[@]} -gt 0 ]]; then
                this_arr=( "${this_arr[@]}" "${value}" )
            else
                this_arr=( "${value}" )
            fi
        else
            declare -g "$key"="$value"
        fi
    done < <( parse_these "${@}" ) 

    $reset_x && set -x || true
    return 0
}

# On exit is called on every exit
function _on_exit()
{
    # Cleanup code goes here
    local exit_status="$?"
}

function _on_term()
{
    echo "Terminated!" >&2
    # A termination also tends to call an error, so we block that
    trap '' ERR
}

function _on_error()
{
    local lineno=$1
    shift
    local pipe_fails=( "${@}" )
    echo "ERROR (${pipe_fails[@]}) on line $lineno: Most recent call last:" >&2
    _print_stack >&2
    local x
    for x in ${pipe_fails[@]}; do
        if [[ $x -ne 0 ]]; then
            exit $x
        fi
    done
    exit 1
}


function _print_stack()
{(
    set +x
   local STACK=""
   local i 
   local stack_size="${#FUNCNAME[@]}"
   # to avoid noise we start with 1 to skip the get_stack function
   for (( i=( stack_size - 1 ); i>=2; i-- )); do
      local func="${FUNCNAME[$i]}"
      [ x$func = x ] && func=MAIN
      local linen="${BASH_LINENO[$(( i - 1 ))]}"
      local src="${BASH_SOURCE[$i]}"
      [ x"$src" = x ] && src=non_file_source

      echo "   at: $func $src:$linen"
   done
)}


trap '_on_term' HUP TERM INT
trap '_on_error $LINENO ${PIPESTATUS[@]}' ERR
trap '_on_exit' EXIT

# Check if any of the args are a cry for help
if echo "${@}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

parse_args search:array -- "${@}"
main  "${destination}" "${search[@]}"

exit $?
