#!/usr/bin/env shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly hash_cache=$( mktemp )

function main()
{
    local destination="$1"
    shift
    local search_folders=( "${@}" )
    hash_files_in_folder "$destination"

    for f in "${search_folders[@]}"; do
        search_folder "$destination" "$f"
    done
}

function hash_files_in_folder()
{(
    local folder="$1"
    local hash file
    while IFS= read -r -d '' file; do
        hash=$( hash_file "$file" ) 
        save_hash "$hash" "$file"
    done < <( find "$folder" -type f -print0 )
)}

function save_hash()
{(
    local hash="$1"
    local file="$2"

    printf "%s:%s\n" "$hash" "$file" >> "$hash_cache"
)}

# Pass in a hash. If it's already found, then return the file(s) associated with that hash.
function search_hash()
{(
    local hash="$1"
    local result
    
    if ! result=$( grep -e "^$hash:" "$hash_cache" ); then
        log 2 "Hash $hash not found in $hash_cache"
        return 1
    fi
    
    if [[ $result == "" ]]; then
        log 2 "Result is blank"
        return 1
    fi

    while IFS=$'\n' read -r line; do
        echo "${line#*:}" 
    done <<< "$result"

    return 0
)}

function search_folder()
{(
    local destination="$1"
    local folder="$2"

    folder=$( readlink -f "$folder" )
    while IFS= read -r -d '' file; do
        full_path=$( readlink -f "$file" )
        check_and_move_file "$destination" "$file"
    done < <( find "$folder" -type f -print0 )
)}

function hash_file()
{(
    for f in "${@}"; do
        sha256sum "${@}" 
    done | awk '{print $1}'
)}

function check_and_move_file()
{(
    local destination="$1"
    local file="$2"

    if file_is_mp3 "$file"; then
        # New name is the original file name with any form of .MP3 changed to .mp3 (all lower case).
        # If it doens't end in .mp3 then .mp3 is appende.
        local new_name="$( basename "$file" | sed -r -e 's/([.][mM][pP][3])?$/.mp3/' )"
        local hash=$( hash_file "$file" ) 
        if existing_file=$( search_hash "$hash" ); then
            log 0 "File $file already saved as $existing_file"
        else
            log 0 "Copying $file to $destination/$new_name"
            cp "$file" "$destination/$new_name"
            save_hash "$hash" "$destination/$new_name"
        fi
    else
        log 0 "File $file is not an mp3"
    fi

    return 0
)}

function file_is_mp3()
{(
    local file="$1"
    local ret=1

    local mime_type=$( file --mime-type "$file" )
    mime_type="${mime_type##*: }"

    if [[ $mime_type == "audio/mpeg" ]]; then
        ret=2
        if file "$file" | grep -q "layer III"; then
            ret=0
        fi
    fi

    return $ret
)}

function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}

shource parse_args()
shource log()
shource traps()

function _on_exit()
{
    if [[ -e "$hash_cache" ]]; then
        rm "$hash_cache"
    fi
}

# Check if any of the args are a cry for help
if echo "${@}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

parse_args search:array -- "${@}"
main  "${destination}" "${search[@]}"

exit $?
